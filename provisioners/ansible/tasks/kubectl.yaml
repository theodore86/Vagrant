---

- name: 'Kubectl | Variables'
  include_vars: 'vars/kubectl.yaml'

- name: 'Kubectl | Check for existing binary'
  stat:
    path: "{{ kubectl_install_dir }}/kubectl"
  register: 'kubectl_check_existing'

- name: 'Kubectl | Check binary version'
  shell: '{{ kubectl_install_dir }}/kubectl version --client --output=yaml'
  changed_when: false
  register: 'kubectl_existing_version'
  when: 'kubectl_check_existing.stat.exists'

- name: 'Kubectl | Serialize binary version output'
  set_fact:
    kubectl_existing_version: '{{ kubectl_existing_version.stdout | from_yaml }}'
  when: 'kubectl_check_existing.stat.exists'

- name: 'Kubectl | Set current binary version'
  set_fact:
    kubectl_existing_version: '{{ kubectl_existing_version.clientVersion.gitVersion.strip("v") }}'
  when: 'kubectl_check_existing.stat.exists'

- name: 'Kubectl | Set binary checksum'
  set_fact:
    kubectl_checksum_binary: '{{ lookup("url", kubectl_binary_checksum_download_url) }}'
  when: not kubectl_check_existing.stat.exists or
        (kubectl_check_existing.stat.exists and
         kubectl_existing_version != kubectl_version)

- name: 'Kubectl | Download binary'
  get_url:
    url: '{{ kubectl_binary_download_url }}'
    checksum: sha512:'{{ kubectl_checksum_binary }}'
    dest: '/tmp/kubectl-{{ kubectl_version }}'
  when: not kubectl_check_existing.stat.exists or
        (kubectl_check_existing.stat.exists and
         kubectl_existing_version != kubectl_version)

- name: 'Kubectl | Remove any installed binary'
  file:
    path: '{{ kubectl_install_dir }}/kubectl'
    state: 'absent'
  become: 'yes'
  when:
    - 'kubectl_check_existing.stat.exists'
    - 'kubectl_existing_version != kubectl_version'

- name: 'Kubectl | Ensure install directory exists'
  file:
    path: '{{ kubectl_install_dir }}'
    state: 'directory'
    mode: 0755
    owner: 'root'
    group: 'root'
  become: 'yes'

- name: 'Kubectl | Copy binary to the installation directory'
  copy:
    src: '/tmp/kubectl-{{ kubectl_version }}'
    dest: '{{ kubectl_install_dir }}/kubectl'
    remote_src: true
    owner: 'root'
    group: 'root'
    mode: 0755
  become: 'yes'
  when: not kubectl_check_existing.stat.exists or
        (kubectl_check_existing.stat.exists and
         kubectl_existing_version != kubectl_version)
  notify:
    - 'Kubectl | Check installed binary version'
    - 'Kubectl | Serialize installed binary version'
    - 'Kubectl | Set installed binary version'
    - 'Kubectl | Verify installed binary version'
...
