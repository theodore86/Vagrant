---

- name: 'PIP | Cleanup configuration file'
  file:
    path: '{{ ansible_env.HOME }}/.pip.conf'
    state: 'absent'

- name: 'Docker | Restart systemd docker'
  systemd:
    name: 'docker'
    state: 'restarted'
    daemon_reload: 'yes'
  become: 'yes'

- name: 'System | Update locales'
  command: >
    dpkg-reconfigure --frontend noninteractive locales
  become: 'yes'

- name: 'TShark | Get build version'
  command: '{{ tshark_build_dir }}/bin/tshark --version'
  changed_when: false
  register: 'tshark_installed_version'
  become: 'yes'

- name: 'TShark | Define build version'
  set_fact:
    tshark_build_version: "{{ tshark_installed_version.stdout | regex_search('(\\d+?\\.\\d+?\\.\\d+?)', '\\1') | first }}"

- name: 'TShark | Verify build version'
  assert:
    that:
      - 'tshark_build_version == tshark_version'
    fail_msg: >
      'Tshark installed {{ tshark_build_version }} version different than requested {{ tshark_version }}'
    success_msg: 'Installed Tshark version is: {{ tshark_installed_version }}'

- name: 'KIND | Check installed binary version'
  shell: '{{ kind_install_dir }}/kind --version'
  changed_when: false
  register: 'kind_check_installed_version'

- name: 'KIND | Define installed binary version'
  set_fact:
    kind_installed_version: '{{ kind_check_installed_version | default("") | regex_search(version_re) }}'
  vars:
    version_re: '(?:\d{1,}\.){2}\d{1,}'

- name: 'KIND | Verify installed binary version'
  assert:
    that:
      - 'kind_installed_version == kind_version'
    fail_msg: 'KIND installation failed, {{ kind_version }} != {{ kind_installed_version }}'
    success_msg: 'Installed KIND version is: {{ kind_version }}'

- name: 'Kubectl | Check installed binary version'
  shell: '{{ kubectl_install_dir }}/kubectl version --client --output=yaml'
  changed_when: false
  register: 'kubectl_installed_version'

- name: 'Kubectl | Serialize installed binary version'
  set_fact:
    kubectl_installed_version: '{{ kubectl_installed_version.stdout | from_yaml }}'

- name: 'Kubectl | Set installed binary version'
  set_fact:
    kubectl_installed_version: '{{ kubectl_installed_version.clientVersion.gitVersion.strip("v") }}'

- name: 'Kubectl | Verify installed binary version'
  assert:
    that:
      - 'kubectl_installed_version == kubectl_version'
    fail_msg: 'Kubectl installation failed, {{ kubectl_version }} != {{ kubectl_installed_version }}'
    success_msg: 'Installed Kubectl version is: {{ kubectl_version }}'

- name: 'Hadolint | Check installed binary version'
  shell: '{{ hadolint_install_dir }}/hadolint --version'
  changed_when: false
  register: 'hadolint_installed_version'

- name: 'Hadolint | Set installed binary version'
  set_fact:
    hadolint_existing_version: '{{ hadolint_installed_version | regex_search(version_re) }}'
  vars:
    version_re: '(?:\d{1,}\.){2}\d{1,}'

- name: 'Hadolint | Verify installed binary version'
  assert:
    that:
      - 'hadolint_existing_version == hadolint_version'
    fail_msg: 'Hadolint installation failed, {{ hadolint_version }} != {{ hadolint_existing_version }}'
    success_msg: 'Installed Hadolint with version: {{ hadolint_version }}'

- name: 'Groovy | Check installed version'
  command: 'groovy --version'
  changed_when: false
  register: 'groovy_installed_version'

- name: 'Groovy | Set installed version'
  set_fact:
    groovy_existing_version: '{{ groovy_installed_version.stdout | regex_search(version_re, "\1") | first }}'
  vars:
    version_re: '^Groovy Version: ((?:\d{1,}\.){2}\d{1,})'

- name: 'Groovy | Verify installed version'
  assert:
    that:
      - 'groovy_existing_version == groovy_version'
    fail_msg: 'Groovy installation failed, {{ groovy_version }} != {{ groovy_existing_version }}'
    success_msg: 'Installed Groovy with version: {{ groovy_version }}'
...
