---
- name: 'Ensure {{ tshark_source }} exists under {{ tshark_workspace }}'
  stat:
    path: '{{ tshark_workspace }}/{{ tshark_source }}'
  register: 'source_result'

- name: 'Get installed version'
  shell: '{{ tshark_build_dir }}/bin/tshark --version'
  args:
    executable: '/bin/bash'
  changed_when: false
  failed_when: false
  register: 'tshark_installed_version'

- name: '{{ tshark_version }} version is already installed'
  debug:
    var: 'tshark_installed_version.stdout'
  when:
    - 'tshark_installed_version.rc == 0'
    - 'tshark_installed_version.stdout | regex_search(tshark_version)'

- name: 'Define v2 installation dependencies'
  set_fact:
    tshark_dependencies: '{{ tshark_v2_dependencies }}'
  when:
    - 'source_result.stat.exists'
    - '(tshark_version.split(".")[0] | int) == 2'
    - 'tshark_installed_version.rc != 0 or not (tshark_installed_version.stdout | regex_search(tshark_version))'

- name: 'Define v3 installation dependencies'
  set_fact:
    tshark_dependencies: '{{ tshark_v3_dependencies }}'
  when:
    - 'source_result.stat.exists'
    - '(tshark_version.split(".")[0] | int) == 3'
    - 'tshark_installed_version.rc != 0 or not (tshark_installed_version.stdout | regex_search(tshark_version))'

- name: 'Install dependencies'
  apt:
    name: '{{ tshark_dependencies }}'
    state: 'present'
    force_apt_get: 'yes'
    install_recommends: 'no'
  become: 'yes'
  when:
    - 'source_result.stat.exists'
    - 'tshark_installed_version.rc != 0 or not (tshark_installed_version.stdout | regex_search(tshark_version))'

- name: 'Removing any previous build under: {{ tshark_build_dir }}'
  file:
    path: '{{ tshark_build_dir }}'
    state: 'absent'
  become: 'yes'
  when:
    - 'source_result.stat.exists'
    - 'tshark_installed_version.rc != 0 or not (tshark_installed_version.stdout | regex_search(tshark_version))'

- name: 'Ensure {{ tshark_build_dir }} build directory exists'
  file:
    path: '{{ tshark_build_dir }}'
    state: 'directory'
    mode: 0755
  become: 'yes'
  when:
    - 'source_result.stat.exists'
    - 'tshark_installed_version.rc != 0 or not (tshark_installed_version.stdout | regex_search(tshark_version))'

- name: 'Extracting {{ tshark_source }} under: {{ tshark_workspace }}'
  unarchive:
    src: '{{ tshark_workspace }}/{{ tshark_source }}'
    dest: '{{ tshark_workspace }}/'
    owner: '{{ ansible_env.USER }}'
    group: '{{ ansible_env.USER }}'
    mode: 0755
    remote_src: 'yes'
    keep_newer: 'no'
    list_files: 'yes'
  register: 'archive_contents'
  when:
    - 'source_result.stat.exists'
    - 'tshark_installed_version.rc != 0 or not (tshark_installed_version.stdout | regex_search(tshark_version))'

- name: 'Define v2 build command'
  set_fact:
    tshark_build_cmd: '{{ tshark_v2_build_cmd }}'
  when:
    - 'source_result.stat.exists'
    - '(tshark_version.split(".")[0] | int) == 2'
    - 'tshark_installed_version.rc != 0 or not (tshark_installed_version.stdout | regex_search(tshark_version))'

- name: 'Define v3 build command'
  set_fact:
    tshark_build_cmd: '{{ tshark_v3_build_cmd }}'
  when:
    - 'source_result.stat.exists'
    - '(tshark_version.split(".")[0] | int) == 3'
    - 'tshark_installed_version.rc != 0 or not (tshark_installed_version.stdout | regex_search(tshark_version))'

- name: 'Building from source: {{ tshark_build_dir }}'
  shell:
    cmd: '{{ item }}'
    chdir: '{{ tshark_workspace }}/{{ archive_contents.files[0].split("/")[0] }}'
  args:
    executable: '/bin/bash'
  loop:
    - '{{ tshark_build_cmd }}'
    - 'make install -j{{ ansible_processor_vcpus }}'
  become: 'yes'
  when:
    - 'source_result.stat.exists'
    - 'tshark_installed_version.rc != 0 or not (tshark_installed_version.stdout | regex_search(tshark_version))'
  notify:
    - 'Get build version'
    - 'Define build version'
    - 'Verify build version'

- name: 'Ensure {{ tshark_group }} group exists'
  group:
    name: '{{ tshark_group }}'
    state: 'present'
  become: 'yes'
  when: 'source_result.stat.exists'

- name: 'Append {{ ansible_env.USER }} user to {{ tshark_group }} group'
  user:
    name: '{{ ansible_env.USER }}'
    state: 'present'
    groups: '{{ tshark_group }}'
    append: 'yes'
  become: 'yes'
  when: 'source_result.stat.exists'

- name: 'Ensure binaries privileges'
  file:
    path: '{{ tshark_build_dir }}/bin'
    state: 'directory'
    group: '{{ tshark_group }}'
    mode: 0750
    recurse: 'yes'
  become: 'yes'
  when: 'source_result.stat.exists'

- name: 'Ensure sniffing as a non-root user'
  shell:
    cmd: 'getcap dumpcap'
    chdir: '{{ tshark_build_dir }}/bin'
  args:
    executable: '/bin/bash'
  register: 'getcap'
  become: 'yes'
  changed_when: false
  when: 'source_result.stat.exists'

- name: 'Allow sniffing as a non-root user'
  shell:
    cmd: 'setcap cap_net_raw,cap_net_admin=eip dumpcap'
    chdir: '{{ tshark_build_dir }}/bin'
  args:
    executable: '/bin/bash'
  become: 'yes'
  when:
    - 'source_result.stat.exists'
    - '"cap_net_admin,cap_net_raw+eip" not in getcap.stdout'
...
