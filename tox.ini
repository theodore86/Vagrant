[tox]
project = Vagrantenv (Sandbox)
skipsdist = true
envlist = pre-testenvs,linters,tests
skip_missing_interpreters = true
requires =
    tox>3
    virtualenv>20


[testenv]
changedir = {toxinidir}
basepython = python3
setenv =
    VIRTUAL_ENV = {envdir}
    PYTHONDONTWRITEBYTECODE = 1
    PYTHONWARNINGS = ignore
    VIRTUALENV_NO_DOWNLOAD = 1
    PIP_CONFIG_FILE = .pip.conf
passenv =
    USER
    HOME
    TERM
    BUNDLE_PATH
    PRE_COMMIT_HOME
    VAGRANT_HOME
    SKIP
    DEBUG
sitepackages = False
allowlist_externals =
    bash
deps = -r requirements.d/testenv.txt
parallel_show_output = true
commands =
    - bash -c 'find {toxinidir} -type d -name "__pycache__" | xargs rm -rf'
    - bash -c 'find {toxinidir} -type d -name ".pytest_cache" | xargs rm -rf'
    - bash -c 'find {toxinidir} -type d -name ".bundle" | xargs rm -rf'
    {envpython} -m pip check


[testenv:linters]
description = Execute all project linters
depends = pre-testenvs
deps = -r requirements.d/linters.txt
commands =
    {envpython} -m pre_commit run {posargs:--all-files --verbose --show-diff-on-failure}
    {envpython} -c 'print("hint: run {envdir}/bin/pre-commit install to add checks as pre-commit hook")'


[testenv:tests]
description = Execute project test automation
depends = pre-testenvs
deps = -r requirements.d/tests.txt
commands =
    {envpython} -m pytest {tty:--color=yes} {posargs:-s -v}


[testenv:docs]
description = Generate project documentation
deps = -r requirements.d/docs.txt
commands =
    {envpython} -m mkdocs serve {posargs}


[testenv:venv]
description = Any local command in virtualenv
commands = {posargs}
